{
    "@global": {
        "base": null,
        "code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstruct Nemanja {\n    uint8 x;\n}\n\n\nstruct Nikola {\n    ERC721 x;\n    Nemanja n;\n}\n\nfunction approve2(address spender) returns (bool) {\n    approve3(spender);\n    ERC20.Milos nikola;\n    return true;\n}\n\nfunction approve3(address spender) returns (bool) {\n    return true;\n}\n\n\n\n\n\n\n\n\n}",
        "functions": {
            "approve2": "function approve2(address spender) returns (bool) {\n    approve3(spender);\n    ERC20.Milos nikola;\n    return true;\n}",
            "approve3": "function approve3(address spender) returns (bool) {\n    return true;\n}"
        },
        "structs": {
            "Nemanja": "struct Nemanja {\n    uint8 x;\n}",
            "Nikola": "struct Nikola {\n    ERC721 x;\n    Nemanja n;\n}"
        },
        "variables": {}
    },
    "ERC20": {
        "base": null,
        "code": "contract ERC20 {\n    uint256 public totalSupply;\n    mapping(\n        address =>uint256\n    ) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    string public name = \"Solidity by Example\";\n    string public symbol = \"SOLBYEX\";\n    uint8 public decimals = 18;\n    Milos public milos;\n    ERC20 public milos20CAO;\n\n    struct Milos {\n        uint8 x;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool)\n    {\n        ERC721 nikolica = new ERC721();\n        Milos m = Milos(2);\n        balanceOf[msg.sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool) {\n        allowance[sender][msg.sender] -= amount;\n        balanceOf[sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n}",
        "functions": {
            "approve": "function approve(address spender, uint256 amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }",
            "transfer": "function transfer(address recipient, uint256 amount)\n        external\n        returns (bool)\n    {\n        ERC721 nikolica = new ERC721();\n        Milos m = Milos(2);\n        balanceOf[msg.sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }",
            "transferFrom": "function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool) {\n        allowance[sender][msg.sender] -= amount;\n        balanceOf[sender] -= amount;\n        balanceOf[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }"
        },
        "structs": {
            "Milos": "struct Milos {\n        uint8 x;\n    }"
        },
        "variables": {
            "allowance": "mapping(address => mapping(address => uint256)) public allowance;",
            "balanceOf": "mapping(\n        address =>uint256\n    ) public balanceOf;",
            "decimals": "uint8 public decimals = 18;",
            "milos": "Milos public milos;",
            "milos20CAO": "ERC20 public milos20CAO;",
            "name": "string public name = \"Solidity by Example\";",
            "symbol": "string public symbol = \"SOLBYEX\";",
            "totalSupply": "uint256 public totalSupply;"
        }
    },
    "ERC721": {
        "base": null,
        "code": "contract ERC721 {\n\n    string public symbol = \"SOLBYEX\";\n    uint8 public decimals = 18;\n\n    function mint(uint256 amount) external {\n        balanceOf[msg.sender] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), msg.sender, amount);\n    }\n\n    function burn(uint256 amount) external {\n        balanceOf[msg.sender] -= amount;\n        totalSupply -= amount;\n        emit Transfer(msg.sender, address(0), amount);\n    }\n}",
        "functions": {
            "burn": "function burn(uint256 amount) external {\n        balanceOf[msg.sender] -= amount;\n        totalSupply -= amount;\n        emit Transfer(msg.sender, address(0), amount);\n    }",
            "mint": "function mint(uint256 amount) external {\n        balanceOf[msg.sender] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), msg.sender, amount);\n    }"
        },
        "structs": {},
        "variables": {
            "decimals": "uint8 public decimals = 18;",
            "symbol": "string public symbol = \"SOLBYEX\";"
        }
    },
    "ERCBASE": {
        "base": null,
        "code": "contract ERCBASE {\n\n    struct STRUCT_BASE {\n        string basee;\n    }\n\n    string public VARIABLE_BASE = \"NESTO\";\n\n    function FUNCTION_BASE() {\n        return true;\n    }\n}",
        "functions": {
            "FUNCTION_BASE": "function FUNCTION_BASE() {\n        return true;\n    }"
        },
        "structs": {
            "STRUCT_BASE": "struct STRUCT_BASE {\n        string basee;\n    }"
        },
        "variables": {
            "VARIABLE_BASE": "string public VARIABLE_BASE = \"NESTO\";"
        }
    },
    "ERCINHERIT": {
        "base": "ERCBASE",
        "code": "contract ERCINHERIT is ERCBASE {\n\n    struct STRUCT_INHERIT {\n        STRUCT_BASE inherited;\n    }\n\n    STRUCT_BASE public VARIABLE_INHERIT;\n\n    function FUNCTION_INHERIT() {\n        VARIABLE_BASE = VARIABLE_BASE;\n        return FUNCTION_BASE();\n    }\n",
        "functions": {
            "FUNCTION_INHERIT": "function FUNCTION_INHERIT() {\n        VARIABLE_BASE = VARIABLE_BASE;\n        return FUNCTION_BASE();\n    }"
        },
        "structs": {
            "STRUCT_INHERIT": "struct STRUCT_INHERIT {\n        STRUCT_BASE inherited;\n    }"
        },
        "variables": {
            "VARIABLE_INHERIT": "STRUCT_BASE public VARIABLE_INHERIT;"
        }
    }
}