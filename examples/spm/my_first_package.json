{
    "definition": {
        "my_first_package": {
            "constracts": {
                "common_globals": {
                    "HelloContract": {
                        "path": "ERC20.Hello",
                        "type": "contracts"
                    },
                    "Point": {
                        "path": "ERC20.@global.Point",
                        "type": "structs"
                    },
                    "add": {
                        "path": "ERC20.@global.add",
                        "type": "functions"
                    }
                },
                "erc20": {
                    "ERC20Constructor": {
                        "path": "ERC20.ERC20.constructor",
                        "type": "functions"
                    },
                    "base": {
                        "Approval": {
                            "path": "ERC20.ERC20.Approval",
                            "type": "events"
                        },
                        "ContractData": {
                            "path": "ERC20.ERC20BASE.ContractData",
                            "type": "structs"
                        }
                    },
                    "onlyOwner": {
                        "path": "ERC20.ERC20.onlyOwner",
                        "type": "modifiers"
                    },
                    "transfer": {
                        "path": "ERC20.ERC20.transfer",
                        "type": "functions"
                    }
                },
                "onlyOwner": {
                    "path": "O+O.Ownable.onlyOwner",
                    "type": "modifiers"
                }
            }
        }
    },
    "solidity_code": {
        "ERC20": {
            "@global": {
                "base": [],
                "code": "",
                "functions": {
                    "add": {
                        "code": "function add(uint x, uint y) pure returns (uint) {\n    return x + y;\n}"
                    }
                },
                "structs": {
                    "Point": {
                        "code": "struct Point {\n    uint x;\n    uint y;\n}"
                    }
                }
            },
            "ERC20": {
                "base": [
                    "ERC20BASE"
                ],
                "code": "contract ERC20 is ERC20BASE {\n\n    ContractData _data;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n\n    constructor(string memory name_) {\n        _data.name = name_;\n        _data.owner = _msgSender();\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        uint256 fromBalance = _balances[from];\n        _balances[from] = fromBalance - amount;\n        _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            _approve(owner, spender, currentAllowance - amount);\n        }\n    }\n\n    modifier onlyOwner {\n      require(msg.sender == _data.owner);\n      _;\n   }\n}",
                "functions": {
                    "_transfer": {
                        "code": "function _transfer(address from, address to, uint256 amount) internal virtual {\n        uint256 fromBalance = _balances[from];\n        _balances[from] = fromBalance - amount;\n        _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }",
                        "dependencies": {
                            "events": [
                                "Transfer"
                            ],
                            "variables": [
                                "_balances"
                            ]
                        }
                    },
                    "constructor": {
                        "code": "constructor(string memory name_) {\n        _data.name = name_;\n        _data.owner = _msgSender();\n    }",
                        "dependencies": {
                            "functions": [
                                "_msgSender"
                            ],
                            "variables": [
                                "_data"
                            ]
                        }
                    },
                    "transfer": {
                        "code": "function transfer(address to, uint256 amount) public returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }",
                        "dependencies": {
                            "functions": [
                                "_transfer",
                                "_msgSender"
                            ]
                        }
                    }
                },
                "modifiers": {
                    "onlyOwner": {
                        "code": "modifier onlyOwner {\n      require(msg.sender == _data.owner);\n      _;\n   }",
                        "dependencies": {
                            "variables": [
                                "_data"
                            ]
                        }
                    }
                },
                "variables": {
                    "_balances": {
                        "code": "mapping(address => uint256) private _balances;"
                    },
                    "_data": {
                        "code": "ContractData _data;",
                        "dependencies": {
                            "structs": [
                                "ContractData"
                            ]
                        }
                    }
                }
            },
            "ERC20BASE": {
                "base": [],
                "code": "abstract contract ERC20BASE {\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    struct ContractData {\n        address owner;\n        string name;   \n    }\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}",
                "events": {
                    "Approval": {
                        "code": "event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );"
                    },
                    "Transfer": {
                        "code": "event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );"
                    }
                },
                "functions": {
                    "_msgSender": {
                        "code": "function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }"
                    }
                },
                "structs": {
                    "ContractData": {
                        "code": "struct ContractData {\n        address owner;\n        string name;   \n    }"
                    }
                }
            },
            "Hello": {
                "base": [],
                "code": "abstract contract Hello {\n    constructor() {\n\n    }\n\n    function hello() pure public returns (string memory) {\n        return {{hello}};\n    }\n}",
                "functions": {
                    "constructor": {
                        "code": "constructor() {\n\n    }"
                    },
                    "hello": {
                        "code": "function hello() pure public returns (string memory) {\n        return {{hello}};\n    }"
                    }
                }
            }
        },
        "O+O": {
            "@global": {
                "base": [],
                "code": ""
            },
            "Ownable": {
                "base": [],
                "code": "contract Ownable {\n    address private _owner;\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(\n            owner() == msg.sender,\n            \"Ownership Assertion: Caller of the function is not the owner.\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        _owner = newOwner;\n    }\n}",
                "functions": {
                    "owner": {
                        "code": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
                        "dependencies": {
                            "variables": [
                                "_owner"
                            ]
                        }
                    }
                },
                "modifiers": {
                    "onlyOwner": {
                        "code": "modifier onlyOwner() {\n        require(\n            owner() == msg.sender,\n            \"Ownership Assertion: Caller of the function is not the owner.\"\n        );\n        _;\n    }",
                        "dependencies": {
                            "functions": [
                                "owner"
                            ]
                        }
                    }
                },
                "variables": {
                    "_owner": {
                        "code": "address private _owner;"
                    }
                }
            }
        }
    }
}