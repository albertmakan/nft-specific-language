/* Generated by SPL [2023-03-22 21:34:27.255928] */
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

// =========== DEPENDENCIES ===========

// ========== YOUR CONTRACTS ==========

contract MyContract {
    
    string public symbol;
    
    mapping(address => mapping(address => uint256)) public allowance;
    
    uint256 public totalSupply;
    
    address private _owner;
    
    string public name;
    
    mapping(address => uint256) public balanceOf;
    
    function owner() public view virtual returns (address) {
        return _owner;
    }
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    
    
    function transfer(
        address recipient,
        uint256 amount
    ) external onlyOwner returns (bool) {
        balanceOf[msg.sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function approve(address spender, uint256 amount) external returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    modifier onlyOwner() {
        require(
            owner() == msg.sender,
            "Ownership Assertion: Caller of the function is not the owner."
        );
        _;
    }
    
    constructor() {
        name = "Example";
        symbol = "EX";
        totalSupply = 10000;
    
        _owner = msg.sender;
    }
    
}
